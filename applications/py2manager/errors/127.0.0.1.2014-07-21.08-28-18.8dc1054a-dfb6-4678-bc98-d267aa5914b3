(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'NoneType' object has no attribute 'id'"
p3
sS'layer'
p4
S'/home/wantsomechocolate/Code/py2manager/applications/py2manager/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n@auth.requires_login()\ndef index():\n    response.flash=T(\'Welcome!\')\n\n    notes=[lambda project: A(\'Notes\',_class=\'btn\',\n        _href=URL(\'default\', \'note\', args=[project.id]))]\n\n    ## This line...\n    ## I wanted to filter the project table to only show projects for the current user\'s company\n    ## I know web2py has the hasmembership/hasgroup decorators, but I just wanted to try it this \n    ## way first.\n    ## This takes auth.user.company which is a STRING and then uses that in a query\n    ## to find the ID of the company (A LONG) in the company table\n    ## The reason I need the id is because db.project.company_name is actually\n    ## a long because that\'s the only way the reference dropdown box would work\n    ## yay!\n    company_record=(db.company(db.company.company_name==auth.user.company)).id\n\n    grid = SQLFORM.grid(db.project.company_name==company_record,create=False, links=notes,\n        fields=[db.project.name,db.project.employee_name,\n        db.project.company_name, db.project.start_date, \n        db.project.due_date, db.project.completed],\n        deletable=False, maxtextlength=50, searchable=False,\n        details=False\n        )\n\n    grid.element(\'.web2py_counter\', replace=None)\n\n    return locals()\n\n@auth.requires_login()\ndef buildings():\n    #company=db.auth_user.company\n    #company_record=(db.company(db.company.company_name==auth.user.company)).id\n    grid=SQLFORM.grid(db.buildings.company, create=True, searchable=True, deletable=False)\n    return locals()\n\n@auth.requires_login()\ndef building_data():\n    company_record=(db.company(db.company.company_name==auth.user.company)).id\n    grid=SQLFORM.grid(db.electric_test.company_name==company_record, create=True, searchable=True, deletable=False)\n    return locals()\n\n\ndef tester():\n    return locals()\n\n@auth.requires_login()\ndef add():\n    company_record=(db.company(db.company.company_name==auth.user.company)).id\n    db.project.company_name.default=company_record\n    project_form = SQLFORM(db.project).process()\n    return dict(project_form = project_form)\n\n@auth.requires_login()\ndef company():\n    company_form = SQLFORM(db.company).process()\n    grid = SQLFORM.grid(db.company, create=False, deletable=False,\n        editable=False, maxtextlength=50, orderby=db.company.company_name)\n    return locals()\n\n@auth.requires_login()\ndef employee():\n    employee_form = SQLFORM(db.auth_user).process()\n    grid = SQLFORM.grid(db.auth_user, create=False,\n        fields = [db.auth_user.first_name, db.auth_user.last_name,\n        db.auth_user.email], deletable=False, editable=False, maxtextlength=50)\n    return locals()\n\n@auth.requires_login()\ndef note():\n    project = db.project(request.args(0))\n    db.note.post_id.default = project.id\n    form = crud.create(db.note) if auth.user else \'Login to post to the project\'\n    allnotes = db(db.note.post_id==project.id).select()\n    return locals()\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/wantsomechocolate/Code/py2manager/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/wantsomechocolate/Code/py2manager/applications/py2manager/controllers/default.py", line 143, in <module>\n  File "/home/wantsomechocolate/Code/py2manager/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/wantsomechocolate/Code/py2manager/gluon/tools.py", line 3287, in f\n    return action(*a, **b)\n  File "/home/wantsomechocolate/Code/py2manager/applications/py2manager/controllers/default.py", line 28, in index\n    company_record=(db.company(db.company.company_name==auth.user.company)).id\nAttributeError: \'NoneType\' object has no attribute \'id\'\n'
p11
s.